import Head from "next/head";
import {
  createAndAddWallet,
  getUserByUsername,
  getWallet,
} from "../../utils/firebase.util";
import Layout from "../../components/layout.component";
import Overlay from "../../components/overlay.component";
import Image from "next/image";
import Button from "../../components/button.component";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import Circle from "../../components/loading-circle.component";
import { useState } from "react";
import AddTokenDialog from "../../components/add-token-dialog.component";
import UserTokens from "../../components/userTokens.component";
import { WalletData } from "../../utils/fetchers.util";
import { User } from "../../utils/types.util";

export async function getServerSideProps({ params: { username } }: any) {
  const profileUser = await getUserByUsername(username);

  const { uid, avatar, account_address, account_balance } = profileUser;

  return {
    props: {
      profileUser: { uid, username, avatar, account_address, account_balance },
    },
  };
}

type Props = {
  profileUser: User;
};

export default function UserPage({ profileUser }: Props) {
  const { uid, username, avatar, account_address, account_balance } =
    profileUser;
  const queryClient = useQueryClient();

  const {
    data,
    isFetching,
    isLoading: isWalletLoading,
  } = useQuery<WalletData>(["wallet"], () => getWallet(uid));

  const mutate = useMutation(async () => await createAndAddWallet(uid), {
    onSuccess: () => {
      queryClient.invalidateQueries(["wallet"]);
    },
  });

  const isLoading = isWalletLoading || isFetching || mutate.isLoading;

  const UserInfo = () => (
    <div className="w-full flex gap-8">
      <div className="w-32 h-32 relative">
        <Image src={avatar!} alt="avatar" fill />
      </div>
      <div className="flex flex-col gap-6">
        <div>
          <p className="text-xl text-primary">
            Username:
            <span className="ml-4 text-lg text-black font-mono ">
              {username}
            </span>
          </p>
        </div>
        {data?.account_address ? (
          <>
            <div>
              <p className="text-xl text-primary">
                Account address:
                <span className="ml-4 text-lg text-black font-mono ">
                  {data!.account_address}
                </span>
              </p>
            </div>
            <div>
              <p className="text-xl text-primary">
                Account balance:
                <span className="ml-4 text-lg text-black font-mono ">
                  {data!.account_balance}
                </span>
              </p>
            </div>
          </>
        ) : (
          <div className="h-full grid place-content-center">
            <Button className="w-full" onClick={mutate.mutate}>
              Create Wallet
            </Button>
          </div>
        )}
      </div>
    </div>
  );

  return (
    <>
      <Head>
        <title>User</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Overlay>
          <section className="card mt-12 h-[150px]">
            {isLoading ? (
              <div className="h-full grid place-items-center">
                <Circle className="text-contrast h-16 w-16" />
              </div>
            ) : (
              <UserInfo />
            )}
          </section>
          <section className="flex flex-col mt-4 items-center">
            <UserTokens profileUser={profileUser} />
          </section>
        </Overlay>
      </Layout>
    </>
  );
}
